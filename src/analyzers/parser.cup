package analyzers;

import AST.NodoAST;

import AST.Arbol;
import AST.Atributo;
import AST.Etiqueta;
import AST.EtiquetaTexto;
import AST.ListaAtributos;
import AST.TagInicial;
import java.util.LinkedList;
import java_cup.runtime.*;

parser code {:

    /**
    * Variable para almacenar el AST formado en el análisis sintáctico.
    */
    public Arbol AST;

    private void printMessage(String s) {
        System.out.println(s);
    }

    /**
     * Método invocado cuando ocurre un errorxxx sintáctico.
     **/
    public void syntax_error(Symbol s){
            System.err.println("Error sintáctico en la línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value.toString()+".");
    }

    /**
     * Método invocado cuando es imposible una recuperación de errores
     **/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
            System.err.println("Error síntactico irrecuperable, Línea " + (s.left)+ " Columna "+s.right + s.value.toString() + " no reconocido.");
    }

    /**
     * Método que devuelve el AST que se generó después de realizar el análisis sintáctico.
     * @return árbol de sintaxis abstacta que será utilizado posteriormente en la ejecución.
     */

    //TablaSimbolos manejadorTablaSimbolos = new TablaSimbolos();

:}


terminal ABRE_TAG;
terminal CIERRA_TAG;
terminal DIAGONAL;
terminal IGUAL;

terminal String TEXTO;
terminal String TEXTO_MULTIPLE;
terminal String MULTIMEDIA_ID;
terminal String FUNCION;


terminal String NOMBRE;
terminal String ENTERO;


non terminal S;

non terminal LinkedList<NodoAST> LTags;
non terminal Etiqueta Tag;
non terminal ListaAtributos Latributos;
non terminal TagInicial TagInicial;
non terminal String TagFinal;
non terminal Atributo Atributo;
non terminal LinkedList<NodoAST> Contenido;
non terminal EtiquetaTexto ListaTextoMultiple;


start with S;

S           ::= LTags:listaTags                 {: parser.AST = new Arbol(listaTags);   printMessage(parser.AST.toString()); :};


LTags       ::= LTags:listaTags Tag:tag         {: RESULT = listaTags; listaTags.add(tag); :}
            |   Tag:tag
                                                {:  RESULT = new LinkedList<NodoAST>(); RESULT.add(tag); :};

Tag         ::= TagInicial:tagInicial Contenido:contenido TagFinal:tagFinal
                                                {:
                                                    RESULT = new Etiqueta(tagInicial, tagFinal, contenido);
                                                :};

TagInicial  ::= ABRE_TAG NOMBRE:nombreTag Latributos:listaAtributos CIERRA_TAG
                                                {:
                                                    RESULT = new TagInicial(nombreTag, listaAtributos);
                                                :}
            |   ABRE_TAG NOMBRE:nombreTag CIERRA_TAG
                                                {:
                                                    RESULT = new TagInicial(nombreTag);
                                                :};
TagFinal    ::= ABRE_TAG DIAGONAL NOMBRE:nombreTag CIERRA_TAG
                                                {:
                                                    RESULT = nombreTag;
                                                :};


Contenido   ::= Contenido:contenido Tag:tag      {:
                                                        RESULT = contenido;
                                                        RESULT.add(tag);
                                                    :}
            |   Tag:tag                             {:
                                                       RESULT = new LinkedList<NodoAST>();
                                                       RESULT.add(tag);
                                                    :}
            |   ListaTextoMultiple:textoMultiple
                                                    {:
                                                        RESULT = new LinkedList<NodoAST>();
                                                        RESULT.add(textoMultiple);
                                                    :};

ListaTextoMultiple  ::= ListaTextoMultiple:listaTexto TEXTO_MULTIPLE:texto
                                                    {:
                                                        listaTexto.texto.append(texto.trim());
                                                        RESULT = listaTexto;
                                                    :}
                    |   TEXTO_MULTIPLE:texto
                                                    {:
                                                        RESULT = new EtiquetaTexto(new StringBuilder(texto));
                                                    :};


Latributos  ::= Latributos:latributos Atributo:atributo     {: RESULT = latributos; RESULT.add(atributo); :}
            |   Atributo:atributo                           {: RESULT =  new ListaAtributos(); RESULT.add(atributo); :};

Atributo    ::= NOMBRE:nombre IGUAL TEXTO:valor             {: RESULT = new Atributo(nombre, valor); :}
            |   NOMBRE:nombre IGUAL FUNCION:valor           {: RESULT = new Atributo(nombre, valor); :}
            |   NOMBRE:nombre IGUAL ENTERO:valor            {: RESULT = new Atributo(nombre, valor); :}
            |   NOMBRE:nombre IGUAL MULTIMEDIA_ID:valor     {: RESULT = new Atributo(nombre, valor); :};
